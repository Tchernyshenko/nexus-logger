#pragma once

/**
 * @file base_logger.hpp
 * @brief Базовый класс системы логирования с IPC
 */

// Base
#include "../ipc/base_qnx_service.hpp"

// Utils
#include "../../common/utils/time_utils.hpp"

// Types
#include "../../common/types/message_types.hpp"
#include "../../common/types/pulse_types.hpp"

namespace nexus::logger {
/**
 * @class BaseLogger
 * @brief Базовый класс для системы логирования с поддержкой IPC
 *
 * Наследует функциональность BaseQnxService и добавляет специфичную для логирования
 * обработку сообщений. Предоставляет интерфейс для различных бэкендов логирования
 * (файл, консоль, сеть и т.д.) через чисто виртуальные методы Write() и Flush().
 *
 * @note Паттерн: Template Method - базовый класс определяет структуру обработки
 *       сообщений, наследники реализуют конкретные механизмы записи.
 */
class BaseLogger : public ipc::BaseQnxService {
public:
    /**
     * @brief Конструктор базового логгера
     * @param name Имя логгера для идентификации в IPC и заголовках сообщений
     * @throw std::invalid_argument При невалидном имени
     * @throw std::system_error При ошибках создания IPC-канала
     */
    explicit BaseLogger(const std::string& name);

    /**
     * @brief Деструктор по умолчанию
     * @note Виртуальный для корректного удаления наследников
     */
    ~BaseLogger() override = default;

    /**
     * @brief Запуск цикла обработки лог-сообщений
     *
     * Переопределяет базовый метод для добавления специфичной для логирования
     * инициализации и обработки. Блокирует выполнение до остановки сервиса.
     *
     * @throw std::system_error При ошибках IPC
     * @throw std::runtime_error При попытке повторного запуска
     */
    void Run();

protected:
    /**
     * @brief Запись форматированного сообщения в бэкенд
     * @param formatted_message Отформатированная строка для записи
     *
     * Чисто виртуальный метод, который должны реализовать наследники
     * для конкретного механизма записи (файл, консоль, БД и т.д.).
     *
     * @note Наследники должны гарантировать потокобезопасность этого метода
     */
    virtual void Write(std::string formatted_message) = 0;

    /**
     * @brief Сброс буферов в конечное хранилище
     *
     * Чисто виртуальный метод для принудительной записи буферизированных данных.
     * Вызывается при остановке сервиса и по другим событиям.
     *
     * @note Наследники должны гарантировать, что после вызова Flush()
     *       все данные записаны в конечное хранилище
     */
    virtual void Flush() = 0;

private:
    /**
     * @brief Обработка IPC пульсов для системных событий
     * @param ipc_pulse Ссылка на структуру пульса
     *
     * Обрабатывает системные пульсы, такие как запросы на остановку,
     * управление уровнем логирования, ротацию логов и т.д.
     *
     * @note Вызывается из основного цикла MsgReceive в базовом классе
     */
    void HandlePulse(const _pulse& ipc_pulse) override;

    /**
     * @brief Обработка IPC сообщений с лог-данными
     * @param ipc_message Ссылка на IPC сообщение
     *
     * Обрабатывает структурированные сообщения, содержащие данные для логирования.
     * Форматирует сообщение с заголовком и передает на запись через Write().
     *
     * @note Вызывается из основного цикла MsgReceive в базовом классе
     */
    void HandleMessage(int receive_id,
                       const ipc::IpcMessage& ipc_message) override;

    /**
     * @brief Обработка ошибок приема IPC сообщений
     * @param error_code Код ошибки из errno
     *
     * Обрабатывает ошибки, возникающие при приеме сообщений через MsgReceive.
     * Логирует ошибку и принимает решение о продолжении работы или остановке.
     *
     * @note Вызывается из основного цикла при ошибках MsgReceive
     */
    void HandleReceiveError(int error_code) override;

    /**
     * @brief Создание заголовка для лог-сообщения
     * @param code Код типа сообщения из ipc::MessageCode
     * @return Строка с форматированным заголовком сообщения
     *
     * Формирует стандартизированный заголовок сообщения, включающий:
     * - Временную метку
     * - Уровень логирования (из кода сообщения)
     * - Процесс/поток (опционально)
     *
     * @example "2024-01-15 14:30:25 INFO"
     */
    static std::string GetMessageHeader(const ipc::MessageCode& code);
};
} // namespace nexus::logger